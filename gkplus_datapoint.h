
#pragma once

// For the Arduino preprocessor to be able to use this type in its autogenerated
// function prototypes, it has to be declared in a separate header file.

class gkplus_datapoint {
public:

  int cpm;
  float uSph;
  float vcc;
  boolean initialized;

  gkplus_datapoint() {
    cpm = -1;
    uSph = -1;
    vcc = -1;
    initialized = false;
  }

  gkplus_datapoint(const String s) {
    parseString(s);
  }

  boolean parseString(const String line) {
    // handle empty and header strings
    if (line.length() == 0 || line.c_str()[0] == 'D') {
      initialized = false;
      return false;
    }

    // split string at commas
    // Default format has five fields (four commas)
    // GK-B5 format has three fields (two commas)
    const int MAX_FIELDS = 5;
    String fields[MAX_FIELDS];
    int fieldIdx = 0;
    int start = 0;
    int end = 0;
  
    while (end < line.length() && fieldIdx < MAX_FIELDS) {
      end = line.indexOf(',', start);
      if (end == -1) {
        end = line.length();
      }
      fields[fieldIdx] = line.substring(start, end);
      start = end + 1; // skip the comma itself
      fieldIdx++;
    }

    // This String class does not provide parsing error handling.
    if (fieldIdx == 3) { // GK-B5 format: CPM, uSph, Vcc
      this->cpm = fields[0].toInt();
      this->uSph = fields[1].toFloat();
      this->vcc = fields[2].toFloat();
    } else if (fieldIdx == 5) { // Default format: date,time,cpm,uSph,Vcc
      this->cpm = fields[2].toInt();
      this->uSph = fields[3].toFloat();
      this->vcc = fields[4].toFloat();
    } else {
      initialized = false;
      return false;
    }
    initialized = true;
    return true;
  }

  String toString() {
    String result("");
    result += "CPM:";
    result += String(cpm);
    result += ", Vcc:";
    result += String(vcc);
    return result;
  }

#ifdef MYGKWIFI_DEBUG
  static getFakeLine() {
    static boolean firstInput = true;
    String input("");
    String firstLine("Date,Time,CPM,uSv/h,Vcc\n");
    // "2020-08-11","15:25:15",0,0.0000,2.714
    String dataLine("\"2020-08-11\",\"15:25:15\",0,0.0000,3.14159\n");
  
    if (firstInput) {
      firstInput = false;
      return firstLine;
    }
  
    return dataLine;
  }
#endif // MYGKWIFI_DEBUG
};
